{
  "hash": "c4b97a64fdc688d518807bd4e8683321",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basics of Data Manipulation in R\"\n---\n\n\n\n### Step 1: Creating the Data Frames\n\nLet's start by creating the three data frames you will use for this assignment. You've already provided a great example of how to create `df_employees` and `df_salaries`. I'll add the third one, `df_performance`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create your own data frames\ndf_employees <- data.frame(\n  EmployeeID = 1:5,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"),\n  Department = c(\"Sales\", \"IT\", \"HR\", \"Marketing\", \"Finance\")\n)\n\ndf_salaries <- data.frame(\n  EmployeeID = c(2, 4, 5, 6, 7),\n  Salary = c(50000, 60000, 55000, 65000, 70000)\n)\n\ndf_performance <- data.frame(\n  EmployeeID = c(1, 3, 5, 7),\n  Rating = c(\"Excellent\", \"Good\", \"Very Good\", \"Outstanding\")\n)\n```\n:::\n\n\n\n### Step 2: Combining Data Frames\n\n#### Using `merge()` in Base R\n\nBase R’s `merge()` function allows you to combine two data frames. You can specify how you want to merge them by using the `all`, `all.x`, or `all.y` parameters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inner join (only matching EmployeeID)\nmerged_inner <- merge(df_employees, df_salaries, by = \"EmployeeID\")\nprint(merged_inner)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID  Name Department Salary\n1          2   Bob         IT  50000\n2          4 David  Marketing  60000\n3          5   Eva    Finance  55000\n```\n\n\n:::\n\n```{.r .cell-code}\n# Full outer join (keep all rows from both data frames)\nmerged_full <- merge(df_employees, df_salaries, by = \"EmployeeID\", all = TRUE)\nprint(merged_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID    Name Department Salary\n1          1   Alice      Sales     NA\n2          2     Bob         IT  50000\n3          3 Charlie         HR     NA\n4          4   David  Marketing  60000\n5          5     Eva    Finance  55000\n6          6    <NA>       <NA>  65000\n7          7    <NA>       <NA>  70000\n```\n\n\n:::\n\n```{.r .cell-code}\n# Left join (all from df_employees, matching from df_salaries)\nmerged_left <- merge(df_employees, df_salaries, by = \"EmployeeID\", all.x = TRUE)\nprint(merged_left)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID    Name Department Salary\n1          1   Alice      Sales     NA\n2          2     Bob         IT  50000\n3          3 Charlie         HR     NA\n4          4   David  Marketing  60000\n5          5     Eva    Finance  55000\n```\n\n\n:::\n\n```{.r .cell-code}\n# Right join (all from df_salaries, matching from df_employees)\nmerged_right <- merge(df_employees, df_salaries, by = \"EmployeeID\", all.y = TRUE)\nprint(merged_right)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID  Name Department Salary\n1          2   Bob         IT  50000\n2          4 David  Marketing  60000\n3          5   Eva    Finance  55000\n4          6  <NA>       <NA>  65000\n5          7  <NA>       <NA>  70000\n```\n\n\n:::\n:::\n\n\n\n#### Using `dplyr`'s `full_join()`\n\nIf you prefer `dplyr`, the syntax is more intuitive, and it's great for chaining multiple operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# Full join using dplyr\nmerged_full_dplyr <- full_join(df_employees, df_salaries, by = \"EmployeeID\")\nprint(merged_full_dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID    Name Department Salary\n1          1   Alice      Sales     NA\n2          2     Bob         IT  50000\n3          3 Charlie         HR     NA\n4          4   David  Marketing  60000\n5          5     Eva    Finance  55000\n6          6    <NA>       <NA>  65000\n7          7    <NA>       <NA>  70000\n```\n\n\n:::\n:::\n\n\n\n#### Using `data.table`'s `merge()`\n\nFor large datasets, `data.table` is often faster. The syntax is quite similar to base R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'data.table'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to data.table\ndt_employees <- as.data.table(df_employees)\ndt_salaries <- as.data.table(df_salaries)\n\n# Full join using data.table\nmerged_full_dt <- merge(dt_employees, dt_salaries, by = \"EmployeeID\", all = TRUE)\nprint(merged_full_dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKey: <EmployeeID>\n   EmployeeID    Name Department Salary\n        <num>  <char>     <char>  <num>\n1:          1   Alice      Sales     NA\n2:          2     Bob         IT  50000\n3:          3 Charlie         HR     NA\n4:          4   David  Marketing  60000\n5:          5     Eva    Finance  55000\n6:          6    <NA>       <NA>  65000\n7:          7    <NA>       <NA>  70000\n```\n\n\n:::\n:::\n\n\n\n### Step 3: Handling Missing Values\n\nAfter merging, there might be missing values. To identify them:\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find employees missing salary information\nmissing_salaries <- merged_full[is.na(merged_full$Salary), ]\nprint(missing_salaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID    Name Department Salary\n1          1   Alice      Sales     NA\n3          3 Charlie         HR     NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find salary records without employee details\nmissing_employees <- merged_full[is.na(merged_full$Name), ]\nprint(missing_employees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID Name Department Salary\n6          6 <NA>       <NA>  65000\n7          7 <NA>       <NA>  70000\n```\n\n\n:::\n:::\n\n\n\n### Step 4: Create a Summary\n\n#### Average Salary per Department\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average salary per department\navg_salary_dept <- merged_full %>%\n  group_by(Department) %>%\n  summarize(Average_Salary = mean(Salary, na.rm = TRUE))\nprint(avg_salary_dept) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  Department Average_Salary\n  <chr>               <dbl>\n1 Finance             55000\n2 HR                    NaN\n3 IT                  50000\n4 Marketing           60000\n5 Sales                 NaN\n6 <NA>                67500\n```\n\n\n:::\n:::\n\n\n\n#### Highest Paid Employee in Each Department\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find highest paid employee in each department\nhighest_paid <- merged_full %>%\n  group_by(Department) %>%\n  filter(Salary == max(Salary, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 2 warnings in `filter()`.\nThe first warning was:\nℹ In argument: `Salary == max(Salary, na.rm = TRUE)`.\nℹ In group 2: `Department = \"HR\"`.\nCaused by warning in `max()`:\n! no non-missing arguments to max; returning -Inf\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(highest_paid) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n# Groups:   Department [4]\n  EmployeeID Name  Department Salary\n       <dbl> <chr> <chr>       <dbl>\n1          2 Bob   IT          50000\n2          4 David Marketing   60000\n3          5 Eva   Finance     55000\n4          7 <NA>  <NA>        70000\n```\n\n\n:::\n:::\n\n\n\n\n### Step 5: Challenge - Combine All Three Data Frames\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all three data frames\ncombined_data <- full_join(merged_full_dplyr, df_performance, by = \"EmployeeID\")\nprint(combined_data) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  EmployeeID    Name Department Salary      Rating\n1          1   Alice      Sales     NA   Excellent\n2          2     Bob         IT  50000        <NA>\n3          3 Charlie         HR     NA        Good\n4          4   David  Marketing  60000        <NA>\n5          5     Eva    Finance  55000   Very Good\n6          6    <NA>       <NA>  65000        <NA>\n7          7    <NA>       <NA>  70000 Outstanding\n```\n\n\n:::\n:::\n\n\n\n### Step 6: Visualization\n\n#### Scatter Plot of Salary vs. Performance Rating\n\nTo create the scatter plot, you can use `ggplot2`:\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Scatter plot of Salary vs. Performance Rating\nggplot(combined_data, aes(x = Rating, y = Salary)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Salary vs. Performance Rating\",\n       x = \"Performance Rating\",\n       y = \"Salary\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](basics_of_data_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n#### Bar Plot of Average Salary by Department\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n# Bar plot showing average salary by department\nggplot(avg_salary_dept, aes(x = Department, y = Average_Salary)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Salary by Department\",\n       x = \"Department\",\n       y = \"Average Salary\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](basics_of_data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### Summary\n\n1. **Combining Data Frames**: You practiced using different ways of combining data frames (`merge()`, `full_join()`, etc.). Each method has slight variations, especially in handling missing data.\n2. **Handling Missing Values**: You learned to identify rows with missing information.\n3. **Summarizing Data**: Calculating averages and filtering rows helps in understanding data trends.\n4. **Visualizations**: Visualizations are essential for better data insights. You learned to create scatter plots and bar plots using `ggplot2`.\n\nFeel free to experiment with more functions and methods! Each of these steps will help you become more comfortable with data manipulation and visualization in R. Happy coding!",
    "supporting": [
      "basics_of_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}